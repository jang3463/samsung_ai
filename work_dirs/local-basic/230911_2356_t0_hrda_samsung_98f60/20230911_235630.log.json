{"env_info": "sys.platform: linux\nPython: 3.8.3 (default, Jul  2 2020, 16:21:59) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.2\nMMCV: 1.3.7\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMSegmentation: 0.16.0+f8aa289", "seed": 1, "exp_name": "230911_2356_t0_hrda_samsung_98f60", "mmseg_version": "0.16.0+f8aa289", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='HRDAEncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='HRDAHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        single_scale_head='DAFormerHead',\n        attention_classwise=True,\n        hr_loss_weight=0.1),\n    train_cfg=dict(\n        work_dir='work_dirs/local-basic/230911_2356_t0_hrda_samsung_98f60'),\n    test_cfg=dict(\n        mode='slide',\n        batched_slide=True,\n        stride=[512, 512],\n        crop_size=[1024, 1024]),\n    scales=[1, 0.5],\n    hr_crop_size=[512, 512],\n    feature_scale=0.5,\n    crop_coord_divisible=8,\n    hr_slide_inference=True)\ndataset_type = 'samsung'\ndata_root = 'data/samsung_source/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (1024, 1024)\ngta_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024)),\n    dict(type='RandomCrop', crop_size=(1024, 1024), cat_max_ratio=0.3),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1920, 1080)),\n    dict(type='RandomCrop', crop_size=(1024, 1024)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1920, 1080),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=1,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='SourceDataset',\n            data_root='data/samsung_source/',\n            img_dir='images',\n            ann_dir='labels',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(2048, 1024)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(1024, 1024),\n                    cat_max_ratio=0.3),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(\n                    type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='TargetDataset',\n            data_root='data/samsung_target/',\n            img_dir='images',\n            ann_dir=None,\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1920, 1080)),\n                dict(type='RandomCrop', crop_size=(1024, 1024)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(\n                    type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(\n                    type='Collect',\n                    keys=['img', 'gt_semantic_seg', 'valid_pseudo_mask'])\n            ],\n            crop_pseudo_margins=[30, 240, 30, 30]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=2.0)),\n    val=dict(\n        type='SourceDataset',\n        data_root='data/samsung_valid/',\n        img_dir='images',\n        ann_dir='labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1920, 1080),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='TargetDataset',\n        data_root='data/samsung_test/',\n        img_dir='test_image',\n        ann_dir=None,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1920, 1080),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=0,\n    pseudo_weight_ignore_bottom=0,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[5, 6, 9, 10, 11],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    model=dict(\n        type='HRDAEncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='HRDAHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            single_scale_head='DAFormerHead',\n            attention_classwise=True,\n            hr_loss_weight=0.1),\n        train_cfg=dict(\n            work_dir='work_dirs/local-basic/230911_2356_t0_hrda_samsung_98f60'\n        ),\n        test_cfg=dict(\n            mode='slide',\n            batched_slide=True,\n            stride=[512, 512],\n            crop_size=[1024, 1024]),\n        scales=[1, 0.5],\n        hr_crop_size=[512, 512],\n        feature_scale=0.5,\n        crop_coord_divisible=8,\n        hr_slide_inference=True),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nseed = 1\nn_gpus = 2\ngpu_model = 'NVIDIA4090TI'\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=5000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230911_2356_t0_hrda_samsung_98f60'\nexp = 'basic'\nname_dataset = 'samsungcityscapesHR_1024x1024'\nname_architecture = 'hrda1-512-0.1_daformer_sepaspp_sl_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'hrda1-512-0.1_daformer_sepaspp_sl'\nname_uda = 'dacs_a999_fdthings_rcs0.01-2.0_cpl2'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-basic/230911_2356_t0_hrda_samsung_98f60'\ngit_rev = 'f8aa28923b03afc3ec5686f4da176eea73083db8'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "Construction", "fence", "pole", "traffic light", "traffic sign", "Nature", "sky", "person", "rider", "car", "background"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [255, 255, 255]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 22355, "data_time": 0.03517, "decode.loss_seg": 2.55899, "decode.acc_seg": 27.99346, "decode.hr.loss_seg": 0.2853, "decode.hr.acc_seg": 22.72614, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.35875, "mix.decode.acc_seg": 34.31849, "mix.decode.hr.loss_seg": 0.14419, "mix.decode.hr.acc_seg": 29.31657, "time": 1.18568}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 22355, "data_time": 0.04132, "decode.loss_seg": 2.18994, "decode.acc_seg": 68.70739, "decode.hr.loss_seg": 0.25649, "decode.hr.acc_seg": 51.68637, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.12539, "mix.decode.acc_seg": 60.83963, "mix.decode.hr.loss_seg": 0.12823, "mix.decode.hr.acc_seg": 50.34404, "time": 1.12863}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 22355, "data_time": 0.05171, "decode.loss_seg": 1.63003, "decode.acc_seg": 78.76082, "decode.hr.loss_seg": 0.20892, "decode.hr.acc_seg": 64.0153, "src.loss_imnet_feat_dist": 0.0742, "mix.decode.loss_seg": 0.78526, "mix.decode.acc_seg": 70.97378, "mix.decode.hr.loss_seg": 0.09973, "mix.decode.hr.acc_seg": 61.75737, "time": 1.13808}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 22355, "data_time": 0.05154, "decode.loss_seg": 1.22232, "decode.acc_seg": 84.3348, "decode.hr.loss_seg": 0.1696, "decode.hr.acc_seg": 73.47806, "src.loss_imnet_feat_dist": 0.07719, "mix.decode.loss_seg": 0.60738, "mix.decode.acc_seg": 73.59787, "mix.decode.hr.loss_seg": 0.08404, "mix.decode.hr.acc_seg": 63.61108, "time": 1.13549}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 22355, "data_time": 0.03275, "decode.loss_seg": 0.91773, "decode.acc_seg": 86.13892, "decode.hr.loss_seg": 0.1374, "decode.hr.acc_seg": 77.20632, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.42733, "mix.decode.acc_seg": 74.56854, "mix.decode.hr.loss_seg": 0.06229, "mix.decode.hr.acc_seg": 67.46545, "time": 1.12248}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 22355, "data_time": 0.01234, "decode.loss_seg": 0.69624, "decode.acc_seg": 87.85984, "decode.hr.loss_seg": 0.11517, "decode.hr.acc_seg": 80.35049, "src.loss_imnet_feat_dist": 0.08326, "mix.decode.loss_seg": 0.29919, "mix.decode.acc_seg": 76.11341, "mix.decode.hr.loss_seg": 0.05316, "mix.decode.hr.acc_seg": 68.42995, "time": 1.09938}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 22355, "data_time": 0.0365, "decode.loss_seg": 0.55943, "decode.acc_seg": 88.30159, "decode.hr.loss_seg": 0.09423, "decode.hr.acc_seg": 82.12037, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.24632, "mix.decode.acc_seg": 76.47571, "mix.decode.hr.loss_seg": 0.04218, "mix.decode.hr.acc_seg": 69.4915, "time": 1.12048}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 22355, "data_time": 0.02023, "decode.loss_seg": 0.48051, "decode.acc_seg": 88.78314, "decode.hr.loss_seg": 0.08211, "decode.hr.acc_seg": 84.37859, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.21324, "mix.decode.acc_seg": 77.069, "mix.decode.hr.loss_seg": 0.03942, "mix.decode.hr.acc_seg": 72.98918, "time": 1.10706}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 22355, "data_time": 0.03356, "decode.loss_seg": 0.41167, "decode.acc_seg": 89.45718, "decode.hr.loss_seg": 0.07644, "decode.hr.acc_seg": 84.5233, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.18736, "mix.decode.acc_seg": 78.43142, "mix.decode.hr.loss_seg": 0.0349, "mix.decode.hr.acc_seg": 71.63218, "time": 1.12147}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 22355, "data_time": 0.02638, "decode.loss_seg": 0.37662, "decode.acc_seg": 89.62045, "decode.hr.loss_seg": 0.06431, "decode.hr.acc_seg": 86.24452, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.17351, "mix.decode.acc_seg": 78.04207, "mix.decode.hr.loss_seg": 0.03265, "mix.decode.hr.acc_seg": 70.15682, "time": 1.11144}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 22355, "data_time": 0.05389, "decode.loss_seg": 0.32739, "decode.acc_seg": 90.51307, "decode.hr.loss_seg": 0.06593, "decode.hr.acc_seg": 84.82792, "src.loss_imnet_feat_dist": 0.08283, "mix.decode.loss_seg": 0.15522, "mix.decode.acc_seg": 79.07235, "mix.decode.hr.loss_seg": 0.0305, "mix.decode.hr.acc_seg": 68.75085, "time": 1.13864}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 22355, "data_time": 0.04921, "decode.loss_seg": 0.28202, "decode.acc_seg": 91.69442, "decode.hr.loss_seg": 0.05344, "decode.hr.acc_seg": 87.62878, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.16012, "mix.decode.acc_seg": 79.75443, "mix.decode.hr.loss_seg": 0.02492, "mix.decode.hr.acc_seg": 73.38767, "time": 1.13836}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 22355, "data_time": 0.14696, "decode.loss_seg": 0.25444, "decode.acc_seg": 92.35154, "decode.hr.loss_seg": 0.0503, "decode.hr.acc_seg": 88.68723, "src.loss_imnet_feat_dist": 0.08376, "mix.decode.loss_seg": 0.19274, "mix.decode.acc_seg": 79.15003, "mix.decode.hr.loss_seg": 0.02923, "mix.decode.hr.acc_seg": 69.7255, "time": 1.236}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 22355, "data_time": 0.03648, "decode.loss_seg": 0.24879, "decode.acc_seg": 92.26697, "decode.hr.loss_seg": 0.04702, "decode.hr.acc_seg": 88.55655, "src.loss_imnet_feat_dist": 0.08015, "mix.decode.loss_seg": 0.14452, "mix.decode.acc_seg": 80.63411, "mix.decode.hr.loss_seg": 0.02552, "mix.decode.hr.acc_seg": 69.58551, "time": 1.12362}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 22355, "data_time": 0.03134, "decode.loss_seg": 0.22701, "decode.acc_seg": 92.8058, "decode.hr.loss_seg": 0.0449, "decode.hr.acc_seg": 88.76968, "src.loss_imnet_feat_dist": 0.08103, "mix.decode.loss_seg": 0.18196, "mix.decode.acc_seg": 81.47233, "mix.decode.hr.loss_seg": 0.02545, "mix.decode.hr.acc_seg": 72.91034, "time": 1.11932}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 22355, "data_time": 0.01701, "decode.loss_seg": 0.2078, "decode.acc_seg": 93.28812, "decode.hr.loss_seg": 0.04413, "decode.hr.acc_seg": 88.72438, "src.loss_imnet_feat_dist": 0.0803, "mix.decode.loss_seg": 0.16434, "mix.decode.acc_seg": 83.24987, "mix.decode.hr.loss_seg": 0.02053, "mix.decode.hr.acc_seg": 72.90033, "time": 1.09961}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 22355, "data_time": 0.0693, "decode.loss_seg": 0.21033, "decode.acc_seg": 93.00622, "decode.hr.loss_seg": 0.04414, "decode.hr.acc_seg": 87.98649, "src.loss_imnet_feat_dist": 0.08191, "mix.decode.loss_seg": 0.31086, "mix.decode.acc_seg": 83.58142, "mix.decode.hr.loss_seg": 0.0481, "mix.decode.hr.acc_seg": 70.79718, "time": 1.15254}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 22355, "data_time": 0.02254, "decode.loss_seg": 0.19693, "decode.acc_seg": 93.4463, "decode.hr.loss_seg": 0.04372, "decode.hr.acc_seg": 88.48347, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.28376, "mix.decode.acc_seg": 84.78863, "mix.decode.hr.loss_seg": 0.02656, "mix.decode.hr.acc_seg": 78.00251, "time": 1.10522}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 22355, "data_time": 0.02192, "decode.loss_seg": 0.20239, "decode.acc_seg": 93.00878, "decode.hr.loss_seg": 0.04129, "decode.hr.acc_seg": 88.70708, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.24854, "mix.decode.acc_seg": 84.76591, "mix.decode.hr.loss_seg": 0.02245, "mix.decode.hr.acc_seg": 77.29585, "time": 1.1062}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 22355, "data_time": 0.03594, "decode.loss_seg": 0.18874, "decode.acc_seg": 93.46434, "decode.hr.loss_seg": 0.03961, "decode.hr.acc_seg": 89.26426, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.42354, "mix.decode.acc_seg": 85.94189, "mix.decode.hr.loss_seg": 0.03615, "mix.decode.hr.acc_seg": 76.46283, "time": 1.12287}
