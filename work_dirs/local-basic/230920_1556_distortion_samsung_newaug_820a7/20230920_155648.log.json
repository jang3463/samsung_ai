{"env_info": "sys.platform: linux\nPython: 3.8.3 (default, Jul  2 2020, 16:21:59) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 4090\nCUDA_HOME: None\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.7.1+cu110\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu110\nOpenCV: 4.5.2\nMMCV: 1.3.7\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMSegmentation: 0.16.0+f8aa289", "seed": 1, "exp_name": "230920_1556_distortion_samsung_newaug_820a7", "mmseg_version": "0.16.0+f8aa289", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='HRDAEncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='HRDAHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=12,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=1.0,\n            loss_name='loss_ce'),\n        single_scale_head='DAFormerHead',\n        attention_classwise=True,\n        hr_loss_weight=0.1),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-basic/230920_1556_distortion_samsung_newaug_820a7'),\n    test_cfg=dict(\n        mode='slide',\n        batched_slide=True,\n        stride=[512, 512],\n        crop_size=[1024, 1024]),\n    scales=[1, 0.5],\n    hr_crop_size=[512, 512],\n    feature_scale=0.5,\n    crop_coord_divisible=8,\n    hr_slide_inference=True)\ndataset_type = 'samsung'\ndata_root = 'data/samsung_source/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (1024, 1024)\ngta_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024)),\n    dict(type='RandomCrop', crop_size=(1024, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(type='GaussNoise', prob=0.3),\n    dict(type='Distortion', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1920, 1080)),\n    dict(type='RandomCrop', crop_size=(1024, 1024)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1920, 1080),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=1,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='SourceDataset',\n            data_root='data/samsung_total/',\n            img_dir='images',\n            ann_dir='labels',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(2048, 1024)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(1024, 1024),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(type='GaussNoise', prob=0.3),\n                dict(type='Distortion', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(\n                    type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='TargetDataset',\n            data_root='data/samsung_target/',\n            img_dir='images',\n            ann_dir=None,\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1920, 1080)),\n                dict(type='RandomCrop', crop_size=(1024, 1024)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(\n                    type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(\n                    type='Collect',\n                    keys=['img', 'gt_semantic_seg', 'valid_pseudo_mask'])\n            ],\n            crop_pseudo_margins=[30, 240, 30, 30]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=2.0)),\n    val=dict(\n        type='SourceDataset',\n        data_root='data/samsung_valid/',\n        img_dir='images',\n        ann_dir='labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1920, 1080),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='TargetDataset',\n        data_root='data/samsung_test/',\n        img_dir='test_image',\n        ann_dir=None,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1920, 1080),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.99,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=0,\n    pseudo_weight_ignore_bottom=0,\n    imnet_feature_dist_lambda=0,\n    imnet_feature_dist_classes=None,\n    imnet_feature_dist_scale_min_ratio=None,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    model=dict(\n        type='HRDAEncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='HRDAHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=12,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss',\n                use_sigmoid=False,\n                loss_weight=1.0,\n                loss_name='loss_ce'),\n            single_scale_head='DAFormerHead',\n            attention_classwise=True,\n            hr_loss_weight=0.1),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-basic/230920_1556_distortion_samsung_newaug_820a7'\n        ),\n        test_cfg=dict(\n            mode='slide',\n            batched_slide=True,\n            stride=[512, 512],\n            crop_size=[1024, 1024]),\n        scales=[1, 0.5],\n        hr_crop_size=[512, 512],\n        feature_scale=0.5,\n        crop_coord_divisible=8,\n        hr_slide_inference=True),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nseed = 1\nn_gpus = 2\ngpu_model = 'NVIDIA4090TI'\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=5000, max_keep_ckpts=1)\nevaluation = dict(interval=2000, metric='mIoU')\nname = '230920_1556_distortion_samsung_newaug_820a7'\nexp = 'basic'\nname_dataset = 'samsungcityscapesHR_1024x1024'\nname_architecture = 'hrda1-512-0.1_daformer_sepaspp_sl_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'hrda1-512-0.1_daformer_sepaspp_sl'\nname_uda = 'dacs_a999_fdthings_rcs0.01-2.0_cpl2'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-basic/230920_1556_distortion_samsung_newaug_820a7'\ngit_rev = 'f8aa28923b03afc3ec5686f4da176eea73083db8'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "Construction", "fence", "pole", "traffic light", "traffic sign", "Nature", "sky", "person", "rider", "car", "background"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [255, 255, 255]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 15448, "data_time": 1.10615, "decode.loss_seg": 2.05074, "decode.acc_seg": 13.18782, "decode.hr.loss_seg": 0.24078, "decode.hr.acc_seg": 11.6708, "mix.decode.loss_seg": 1.11955, "mix.decode.acc_seg": 19.78916, "mix.decode.hr.loss_seg": 0.1262, "mix.decode.hr.acc_seg": 18.54234, "time": 2.21302}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 15448, "data_time": 1.98519, "decode.loss_seg": 1.72975, "decode.acc_seg": 57.87585, "decode.hr.loss_seg": 0.21378, "decode.hr.acc_seg": 49.72282, "mix.decode.loss_seg": 0.89183, "mix.decode.acc_seg": 43.64218, "mix.decode.hr.loss_seg": 0.1069, "mix.decode.hr.acc_seg": 40.87136, "time": 3.01087}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 15448, "data_time": 1.48223, "decode.loss_seg": 1.26378, "decode.acc_seg": 66.9709, "decode.hr.loss_seg": 0.17227, "decode.hr.acc_seg": 65.84901, "mix.decode.loss_seg": 0.64634, "mix.decode.acc_seg": 63.60503, "mix.decode.hr.loss_seg": 0.08858, "mix.decode.hr.acc_seg": 60.36924, "time": 2.48898}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 15448, "data_time": 1.59161, "decode.loss_seg": 0.99163, "decode.acc_seg": 69.27589, "decode.hr.loss_seg": 0.14804, "decode.hr.acc_seg": 64.47844, "mix.decode.loss_seg": 0.49772, "mix.decode.acc_seg": 67.2374, "mix.decode.hr.loss_seg": 0.07408, "mix.decode.hr.acc_seg": 59.63182, "time": 2.62679}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 15448, "data_time": 1.60145, "decode.loss_seg": 0.75387, "decode.acc_seg": 72.03702, "decode.hr.loss_seg": 0.12406, "decode.hr.acc_seg": 69.04067, "mix.decode.loss_seg": 0.36841, "mix.decode.acc_seg": 72.08468, "mix.decode.hr.loss_seg": 0.05772, "mix.decode.hr.acc_seg": 67.03071, "time": 2.6084}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 15448, "data_time": 1.52862, "decode.loss_seg": 0.58254, "decode.acc_seg": 75.20402, "decode.hr.loss_seg": 0.10293, "decode.hr.acc_seg": 74.40751, "mix.decode.loss_seg": 0.27621, "mix.decode.acc_seg": 73.82795, "mix.decode.hr.loss_seg": 0.04956, "mix.decode.hr.acc_seg": 67.46267, "time": 2.5203}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 15448, "data_time": 1.58258, "decode.loss_seg": 0.49497, "decode.acc_seg": 74.77439, "decode.hr.loss_seg": 0.09009, "decode.hr.acc_seg": 77.49758, "mix.decode.loss_seg": 0.22844, "mix.decode.acc_seg": 73.55531, "mix.decode.hr.loss_seg": 0.03982, "mix.decode.hr.acc_seg": 70.61584, "time": 2.57093}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 15448, "data_time": 1.7004, "decode.loss_seg": 0.42357, "decode.acc_seg": 74.53315, "decode.hr.loss_seg": 0.07662, "decode.hr.acc_seg": 79.35953, "mix.decode.loss_seg": 0.22297, "mix.decode.acc_seg": 75.97964, "mix.decode.hr.loss_seg": 0.0378, "mix.decode.hr.acc_seg": 72.73766, "time": 2.69687}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 15448, "data_time": 1.29363, "decode.loss_seg": 0.35899, "decode.acc_seg": 76.23892, "decode.hr.loss_seg": 0.07444, "decode.hr.acc_seg": 79.82141, "mix.decode.loss_seg": 0.18988, "mix.decode.acc_seg": 75.86987, "mix.decode.hr.loss_seg": 0.03566, "mix.decode.hr.acc_seg": 70.41014, "time": 2.2897}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 15448, "data_time": 1.4901, "decode.loss_seg": 0.36382, "decode.acc_seg": 75.86539, "decode.hr.loss_seg": 0.07011, "decode.hr.acc_seg": 80.44021, "mix.decode.loss_seg": 0.21706, "mix.decode.acc_seg": 77.4845, "mix.decode.hr.loss_seg": 0.03762, "mix.decode.hr.acc_seg": 75.31855, "time": 2.48169}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 15448, "data_time": 1.73288, "decode.loss_seg": 0.31998, "decode.acc_seg": 75.56809, "decode.hr.loss_seg": 0.06164, "decode.hr.acc_seg": 78.0795, "mix.decode.loss_seg": 0.2043, "mix.decode.acc_seg": 79.73381, "mix.decode.hr.loss_seg": 0.04796, "mix.decode.hr.acc_seg": 75.44067, "time": 2.73127}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 15448, "data_time": 1.76991, "decode.loss_seg": 0.28, "decode.acc_seg": 77.21511, "decode.hr.loss_seg": 0.05721, "decode.hr.acc_seg": 82.2206, "mix.decode.loss_seg": 0.18234, "mix.decode.acc_seg": 82.1563, "mix.decode.hr.loss_seg": 0.04147, "mix.decode.hr.acc_seg": 76.64987, "time": 2.79703}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 15448, "data_time": 1.45749, "decode.loss_seg": 0.25678, "decode.acc_seg": 77.98293, "decode.hr.loss_seg": 0.04743, "decode.hr.acc_seg": 85.05144, "mix.decode.loss_seg": 0.19082, "mix.decode.acc_seg": 81.71435, "mix.decode.hr.loss_seg": 0.03985, "mix.decode.hr.acc_seg": 79.78323, "time": 2.45191}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 15448, "data_time": 1.26185, "decode.loss_seg": 0.26528, "decode.acc_seg": 77.19272, "decode.hr.loss_seg": 0.05334, "decode.hr.acc_seg": 81.22952, "mix.decode.loss_seg": 0.18225, "mix.decode.acc_seg": 80.74537, "mix.decode.hr.loss_seg": 0.03774, "mix.decode.hr.acc_seg": 79.14862, "time": 2.2615}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 15448, "data_time": 1.56142, "decode.loss_seg": 0.23839, "decode.acc_seg": 78.43526, "decode.hr.loss_seg": 0.04607, "decode.hr.acc_seg": 85.06219, "mix.decode.loss_seg": 0.16041, "mix.decode.acc_seg": 84.11428, "mix.decode.hr.loss_seg": 0.03266, "mix.decode.hr.acc_seg": 82.87817, "time": 2.55821}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 15448, "data_time": 1.22818, "decode.loss_seg": 0.2037, "decode.acc_seg": 78.9286, "decode.hr.loss_seg": 0.04004, "decode.hr.acc_seg": 85.62854, "mix.decode.loss_seg": 0.15474, "mix.decode.acc_seg": 83.80288, "mix.decode.hr.loss_seg": 0.03073, "mix.decode.hr.acc_seg": 83.61097, "time": 2.21533}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 15448, "data_time": 1.48358, "decode.loss_seg": 0.19271, "decode.acc_seg": 79.13426, "decode.hr.loss_seg": 0.03988, "decode.hr.acc_seg": 85.20233, "mix.decode.loss_seg": 0.14738, "mix.decode.acc_seg": 83.62955, "mix.decode.hr.loss_seg": 0.03086, "mix.decode.hr.acc_seg": 83.15018, "time": 2.47631}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 15448, "data_time": 1.41637, "decode.loss_seg": 0.17498, "decode.acc_seg": 79.04188, "decode.hr.loss_seg": 0.03525, "decode.hr.acc_seg": 88.51009, "mix.decode.loss_seg": 0.13713, "mix.decode.acc_seg": 85.52217, "mix.decode.hr.loss_seg": 0.03612, "mix.decode.hr.acc_seg": 83.2528, "time": 2.40717}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 15448, "data_time": 1.3335, "decode.loss_seg": 0.17932, "decode.acc_seg": 80.08285, "decode.hr.loss_seg": 0.03685, "decode.hr.acc_seg": 83.6432, "mix.decode.loss_seg": 0.14175, "mix.decode.acc_seg": 84.08011, "mix.decode.hr.loss_seg": 0.02832, "mix.decode.hr.acc_seg": 84.96169, "time": 2.32919}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 15448, "data_time": 1.58119, "decode.loss_seg": 0.18115, "decode.acc_seg": 79.12906, "decode.hr.loss_seg": 0.03687, "decode.hr.acc_seg": 85.06867, "mix.decode.loss_seg": 0.13996, "mix.decode.acc_seg": 83.71316, "mix.decode.hr.loss_seg": 0.02901, "mix.decode.hr.acc_seg": 85.14515, "time": 2.59168}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 4e-05, "memory": 15448, "data_time": 1.28496, "decode.loss_seg": 0.18122, "decode.acc_seg": 79.62845, "decode.hr.loss_seg": 0.0394, "decode.hr.acc_seg": 85.08982, "mix.decode.loss_seg": 0.14231, "mix.decode.acc_seg": 85.22146, "mix.decode.hr.loss_seg": 0.03027, "mix.decode.hr.acc_seg": 86.11094, "time": 2.33326}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 4e-05, "memory": 15448, "data_time": 1.34423, "decode.loss_seg": 0.1667, "decode.acc_seg": 80.24463, "decode.hr.loss_seg": 0.03349, "decode.hr.acc_seg": 86.56485, "mix.decode.loss_seg": 0.14264, "mix.decode.acc_seg": 85.63131, "mix.decode.hr.loss_seg": 0.04109, "mix.decode.hr.acc_seg": 83.86697, "time": 2.33202}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 4e-05, "memory": 15448, "data_time": 1.48187, "decode.loss_seg": 0.165, "decode.acc_seg": 80.0768, "decode.hr.loss_seg": 0.03578, "decode.hr.acc_seg": 85.44904, "mix.decode.loss_seg": 0.14159, "mix.decode.acc_seg": 86.1738, "mix.decode.hr.loss_seg": 0.03832, "mix.decode.hr.acc_seg": 83.12288, "time": 2.47276}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 5e-05, "memory": 15448, "data_time": 1.18381, "decode.loss_seg": 0.17487, "decode.acc_seg": 79.53885, "decode.hr.loss_seg": 0.03617, "decode.hr.acc_seg": 83.50785, "mix.decode.loss_seg": 0.13122, "mix.decode.acc_seg": 86.39957, "mix.decode.hr.loss_seg": 0.02659, "mix.decode.hr.acc_seg": 86.48496, "time": 2.17892}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 5e-05, "memory": 15448, "data_time": 1.65125, "decode.loss_seg": 0.16149, "decode.acc_seg": 80.28597, "decode.hr.loss_seg": 0.03142, "decode.hr.acc_seg": 86.00558, "mix.decode.loss_seg": 0.14555, "mix.decode.acc_seg": 86.15093, "mix.decode.hr.loss_seg": 0.03974, "mix.decode.hr.acc_seg": 84.45132, "time": 2.6434}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 5e-05, "memory": 15448, "data_time": 1.27033, "decode.loss_seg": 0.17994, "decode.acc_seg": 79.06211, "decode.hr.loss_seg": 0.03288, "decode.hr.acc_seg": 86.09067, "mix.decode.loss_seg": 0.14735, "mix.decode.acc_seg": 83.92693, "mix.decode.hr.loss_seg": 0.02952, "mix.decode.hr.acc_seg": 84.40665, "time": 2.25523}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 5e-05, "memory": 15448, "data_time": 1.64377, "decode.loss_seg": 0.18191, "decode.acc_seg": 79.7275, "decode.hr.loss_seg": 0.03646, "decode.hr.acc_seg": 86.87884, "mix.decode.loss_seg": 0.14998, "mix.decode.acc_seg": 85.68356, "mix.decode.hr.loss_seg": 0.03092, "mix.decode.hr.acc_seg": 86.41817, "time": 2.63809}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 5e-05, "memory": 15448, "data_time": 1.62743, "decode.loss_seg": 0.16938, "decode.acc_seg": 79.5306, "decode.hr.loss_seg": 0.03286, "decode.hr.acc_seg": 86.55581, "mix.decode.loss_seg": 0.1303, "mix.decode.acc_seg": 85.05784, "mix.decode.hr.loss_seg": 0.02718, "mix.decode.hr.acc_seg": 85.25495, "time": 2.65107}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 6e-05, "memory": 15448, "data_time": 1.40386, "decode.loss_seg": 0.15644, "decode.acc_seg": 80.41441, "decode.hr.loss_seg": 0.02766, "decode.hr.acc_seg": 87.15207, "mix.decode.loss_seg": 0.12739, "mix.decode.acc_seg": 86.41674, "mix.decode.hr.loss_seg": 0.04183, "mix.decode.hr.acc_seg": 84.9906, "time": 2.42453}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 6e-05, "memory": 15448, "data_time": 1.48061, "decode.loss_seg": 0.16054, "decode.acc_seg": 79.54027, "decode.hr.loss_seg": 0.03095, "decode.hr.acc_seg": 84.14565, "mix.decode.loss_seg": 0.12855, "mix.decode.acc_seg": 86.03177, "mix.decode.hr.loss_seg": 0.02739, "mix.decode.hr.acc_seg": 86.80088, "time": 2.49607}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 6e-05, "memory": 15448, "data_time": 1.33729, "decode.loss_seg": 0.15874, "decode.acc_seg": 79.77256, "decode.hr.loss_seg": 0.02974, "decode.hr.acc_seg": 87.48171, "mix.decode.loss_seg": 0.13674, "mix.decode.acc_seg": 85.01252, "mix.decode.hr.loss_seg": 0.0272, "mix.decode.hr.acc_seg": 87.45637, "time": 2.35675}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 6e-05, "memory": 15448, "data_time": 1.87021, "decode.loss_seg": 0.15972, "decode.acc_seg": 79.86297, "decode.hr.loss_seg": 0.03364, "decode.hr.acc_seg": 85.21874, "mix.decode.loss_seg": 0.14653, "mix.decode.acc_seg": 85.62009, "mix.decode.hr.loss_seg": 0.03541, "mix.decode.hr.acc_seg": 83.7194, "time": 2.88161}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 6e-05, "memory": 15448, "data_time": 1.56525, "decode.loss_seg": 0.14929, "decode.acc_seg": 79.98885, "decode.hr.loss_seg": 0.02615, "decode.hr.acc_seg": 87.99199, "mix.decode.loss_seg": 0.12821, "mix.decode.acc_seg": 86.07025, "mix.decode.hr.loss_seg": 0.03081, "mix.decode.hr.acc_seg": 84.78685, "time": 2.58048}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 6e-05, "memory": 15448, "data_time": 2.09412, "decode.loss_seg": 0.13911, "decode.acc_seg": 80.98117, "decode.hr.loss_seg": 0.0266, "decode.hr.acc_seg": 87.40858, "mix.decode.loss_seg": 0.12082, "mix.decode.acc_seg": 87.67667, "mix.decode.hr.loss_seg": 0.02642, "mix.decode.hr.acc_seg": 86.29145, "time": 3.10983}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 6e-05, "memory": 15448, "data_time": 1.29146, "decode.loss_seg": 0.1512, "decode.acc_seg": 80.72299, "decode.hr.loss_seg": 0.03193, "decode.hr.acc_seg": 84.43568, "mix.decode.loss_seg": 0.12932, "mix.decode.acc_seg": 87.1254, "mix.decode.hr.loss_seg": 0.02519, "mix.decode.hr.acc_seg": 87.16252, "time": 2.29723}
